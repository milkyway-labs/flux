package types

import (
	"slices"
	"time"

	"github.com/milkyway-labs/flux/types"
	"github.com/milkyway-labs/flux/utils"
)

var _ types.Block = &Block{}

type Block struct {
	ChainID   string
	Height    types.Height
	Timestamp time.Time
	Logs      Logs
	Txs       []*Tx
}

func NewBlock(
	chainID string,
	height types.Height,
	timestamp time.Time,
	txs []*Tx,
) *Block {
	return &Block{
		ChainID:   chainID,
		Height:    height,
		Timestamp: timestamp,
		Txs:       txs,
	}
}

// GetChainID implements types.Block.
func (b *Block) GetChainID() string {
	return b.ChainID
}

// GetHeight implements types.Block.
func (b *Block) GetHeight() types.Height {
	return b.Height
}

// GetTimeStamp implements types.Block.
func (b *Block) GetTimeStamp() time.Time {
	return b.Timestamp
}

// GetTxs implements types.Block.
func (b *Block) GetTxs() []types.Tx {
	result := make([]types.Tx, len(b.Txs))
	for i, tx := range b.Txs {
		result[i] = tx
	}
	return result
}

func (b *Block) WithLogs(logs Logs) *Block {
	b.Logs = logs
	return b
}

// ----------------------------------------------------------------------------
// ---- EVM Tx type definition
// ----------------------------------------------------------------------------

var _ types.Tx = &Tx{}

type Tx struct {
	// The transaction hash bytes
	Hash EVMBytes
	// Logs entry generated by this transaction
	Logs    Logs
	Success bool
}

func NewTx(hash EVMBytes, success bool) *Tx {
	return &Tx{
		Hash:    hash,
		Success: success,
	}
}

// GetHash implements types.Tx.
func (t *Tx) GetHash() string {
	return t.Hash.NormalizedHex()
}

// IsSuccessful implements types.Tx.
func (t *Tx) IsSuccessful() bool {
	return t.Success
}

func (t *Tx) WithLogs(logs Logs) *Tx {
	t.Logs = logs
	return t
}

// ----------------------------------------------------------------------------
// ---- EVM Log entry
// ----------------------------------------------------------------------------

// LogEntry represents an Ethereum event log entry.
type LogEntry struct {
	// Consensus fields:
	// Address address of the contract that generated the event
	Address EVMBytes
	// Topics list of topics provided by the contract.
	Topics []EVMBytes
	// supplied by the contract, usually ABI-encoded
	Data EVMBytes

	// Derived fields. These fields are filled in by the node
	// but not secured by consensus.
	// block in which the transaction was included
	BlockNumber uint64
	// index of the transaction in the block
	TxIndex uint
	// index of the log in the block
	Index uint

	// The Removed field is true if this log was reverted due to a chain reorganisation.
	// You must pay attention to this field if you receive logs through a filter query.
	Removed bool
}

// ----------------------------------------------------------------------------
// ---- EVM Logs
// ----------------------------------------------------------------------------

type Logs []LogEntry

// FindEntryFunc finds the first LogEntry matching the given predicate.
func (l Logs) FindEntryFunc(predicate func(LogEntry) bool) (LogEntry, bool) {
	index := slices.IndexFunc(l, predicate)
	if index == -1 {
		return LogEntry{}, false
	}
	return l[index], true
}

// FilterFunc returns all the LogEntry that match the given predicate.
func (l Logs) FilterFunc(predicate func(LogEntry) bool) Logs {
	return utils.Filter(l, predicate)
}
